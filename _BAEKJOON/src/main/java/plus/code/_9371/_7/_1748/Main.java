package plus.code._9371._7._1748;
/*
 * 1부터 N 까지 수를 이어서 쓴다.
 * 그러면 새로운 수를 하나 얻을 수 있다.
 * 123456789 1011121314151617181920 2122232425...
 *
 * 이 수의 자리수는 얼마일까?
 *
 * -- 입력값
 * N (1 이상 100,000,000 이하)
 *
 * -- 출력값
 * 자릿수를 출력해라
 *
 *
 * 첫번째 아이디어 --
 * 이것도 일단 그냥 더해버리면 될 듯 하다.
 * 1 ~ 9 1개씩
 * 10 ~ 99 2개씩
 * 100 ~ 999 3개씩
 * 1000 ~ 9999 4개씩
 * ...
 *
 * 10^n ~ 10^(n+1)-1 n+1개씩
 *
 * -- 첫번째 아이디어 시간초과
 *
 * 두번째 아이디어 --
 * 거꾸로 생각해보는건 어떨까? 그리고 겸사겸사 조그마한 그림을 그려보자.
 * 예를 들어 26893 까지 나열한다고 하자. 각 자릿수가 있는 부분을 1 없는부분을 0 이라고 하자.
 * 00001 : 0 0 0 0 1
 * 00002 : 0 0 0 0 1
 * ...
 * 00008 : 0 0 0 0 1
 * 00009 : 0 0 0 0 1
 * 00010 : 0 0 0 1 1 -> 10 부터는 자릿수가 2개 이므로 1 1 이다.
 * 00011 : 0 0 0 1 1
 * ...
 * 00098 : 0 0 0 1 1
 * 00099 : 0 0 0 1 1
 * 00100 : 0 0 1 1 1
 * 00101 : 0 0 1 1 1
 * ...
 * 00998 : 0 0 1 1 1
 * 00999 : 0 0 1 1 1
 * 01000 : 0 1 1 1 1
 * 01001 : 0 1 1 1 1
 * ...
 * 09998 : 0 1 1 1 1
 * 09999 : 0 1 1 1 1
 * 10000 : 1 1 1 1 1
 * ...
 * 26892 : 1 1 1 1 1
 * 26893 : 1 1 1 1 1
 *
 * 마치 사각형에서 0으로 이루어진 삼각형을 뺀 것과 동일하다고 생각할 수 있다.
 * 이러면 연산횟수가 말도 안되게 줄어든다.
 *
 * 위에 같은 경우
 * 26893 * (26893의 자릿수) - 9999 - 999 - 99 - 9
 * 첫번째 아이디어와 답을 맞췄을때 일치했다.
 * */

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();

        int inputLength = (int) Math.floor(Math.log10(N)) + 1;
        int result = N * inputLength;

        for (int i = 1; i < inputLength; i++) {
            result -= ((int) Math.pow(10, i) - 1);
        }
        System.out.println(result);
    }
}

